Index: README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># qa_python
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/README.md b/README.md
--- a/README.md	(revision a608c454eaf8055a643c4769aa805f47a3f41867)
+++ b/README.md	(date 1687197851202)
@@ -1,1 +1,10 @@
-# qa_python
\ No newline at end of file
+# qa_python
+test_add_new_book_add_two_books - Добавляет две новые книги
+test_add_same_book_twice_false - Проверяет, что нельзя добавить одну и ту же книгу дважды
+test_set_rating_books_from_list_false - Проверяет, что нельзя выставить рейтинг книге которой нет в списке
+test_set_rating_less_then_one_false - Проверяет, что нельзя выставить рейтинг книге меньше 1
+test_set_rating_more_then_ten_false - Проверяет, что нельзя выставить книге рейтинг больше 10десяти
+test_get_book_not_in_list_false - Проверяет, что у не добавленной книги нет рейтинга
+test_add_book_favorites_true - добавляет книгу в избранное
+test_add_book_in_favorites_which_not_in_dict_false - проверяет что нельзя добавить книгу в избранное, если ее нет в словаре
+test_delete_book_from_favorites - проверяет удаление книги из избранного
\ No newline at end of file
Index: tests.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from main import BooksCollector\r\n\r\n# класс TestBooksCollector объединяет набор тестов, которыми мы покрываем наше приложение BooksCollector\r\n# обязательно указывать префикс Test\r\nclass TestBooksCollector:\r\n\r\n    # пример теста:\r\n    # обязательно указывать префикс test_\r\n    # дальше идет название метода, который тестируем add_new_book_\r\n    # затем, что тестируем add_two_books - добавление двух книг\r\n    def test_add_new_book_add_two_books(self):\r\n        # создаем экземпляр (объект) класса BooksCollector\r\n        collector = BooksCollector()\r\n\r\n        # добавляем две книги\r\n        collector.add_new_book('Гордость и предубеждение и зомби')\r\n        collector.add_new_book('Что делать, если ваш кот хочет вас убить')\r\n\r\n        # проверяем, что добавилось именно две\r\n        # словарь books_rating, который нам возвращает метод get_books_rating, имеет длину 2\r\n        assert len(collector.get_books_rating()) == 2\r\n\r\n    # напиши свои тесты ниже\r\n    # чтобы тесты были независимыми в каждом из них создавай отдельный экземпляр класса BooksCollector()
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/tests.py b/tests.py
--- a/tests.py	(revision a608c454eaf8055a643c4769aa805f47a3f41867)
+++ b/tests.py	(date 1687197792372)
@@ -21,4 +21,57 @@
         assert len(collector.get_books_rating()) == 2
 
     # напиши свои тесты ниже
-    # чтобы тесты были независимыми в каждом из них создавай отдельный экземпляр класса BooksCollector()
\ No newline at end of file
+    # чтобы тесты были независимыми в каждом из них создавай отдельный экземпляр класса BooksCollector()
+
+    #Нельзя добавить одну и ту же книгу дважды
+    def test_add_same_book_twice_false(self):
+        collector = BooksCollector()
+        collector.add_new_book('Сказки Пушкина')
+        collector.add_new_book('Сказки Пушкина')
+        assert len(collector.get_books_rating()) == 1
+
+    #Нельзя выставить рейтинг книге, которой нет в списке
+    def test_set_rating_books_from_list_false(self):
+        collector = BooksCollector()
+        collector.set_book_rating('Как заработать миллион проблем', 6)
+        assert collector.books_rating == {}
+
+    #Нельзя выставить рейтинг меньше 1
+    def test_set_rating_less_then_one_false(self):
+        collector = BooksCollector()
+        collector.add_new_book('Гордость и предубеждение и зомби')
+        collector.set_book_rating('Гордость и предубеждение и зомби', 0)
+        assert collector.get_books_rating() == {'Гордость и предубеждение и зомби' : 1}
+
+    #Нельзя выставить рейтинг больше 10
+    def test_set_rating_more_then_ten_false(self):
+        collector = BooksCollector()
+        collector.add_new_book('Что делать, если ваш кот хочет вас убить')
+        collector.set_book_rating('Что делать, если ваш кот хочет вас убить', 11)
+        assert collector.get_books_rating() == {'Что делать, если ваш кот хочет вас убить' : 1}
+
+    #У не добавленной книги нет рейтинга.
+    def test_get_book_not_in_list_false(self):
+        collector = BooksCollector()
+        assert collector.get_book_rating('Преступление и наказание') is None
+
+    #Добавление книги в избранное
+    def test_add_book_favorites_true(self):
+        collector = BooksCollector()
+        collector.add_new_book('Атлант расправил плечи')
+        collector.add_book_in_favorites('Атлант расправил плечи')
+        assert collector.favorites == ['Атлант расправил плечи']
+
+    #Нельзя добавить книгу в избранное, если её нет в словаре books_rating
+    def test_add_book_in_favorites_which_not_in_dict_false(self):
+        collector = BooksCollector()
+        collector.add_book_in_favorites('Мастер и Маргарита')
+        assert collector.favorites == []
+
+    #Проверка удаления книги из избранного
+    def test_delete_book_from_favorites(self):
+        collector = BooksCollector()
+        collector.add_new_book('Aтлант расправил плечи')
+        collector.add_book_in_favorites('Атлант расправил плечи')
+        collector.delete_book_from_favorites('Атлант расправил плечи')
+        assert collector.favorites == []
